// 24h volume
currency = "USD"
msIn24h = 24*60*60*1000
countOfFiveMinsInDay = 24*60/5
maxBufferSize = 2*countOfFiveMinsInDay
sumVolTF = "5"
// rollOnTimeWhen is internal function from PineCoders/getSeries/1 library
rollOnTimeWhen(series float src, simple int timeWindow, series bool cond = true, simple int minBars = 1) =>
    var float[] sources = array.new_float(0)
    var int[]   times   = array.new_int(0)
    if cond
        array.push(sources, src)
        array.push(times,   time)
    if array.size(sources) > 0
        while time - array.get(times, 0) >= timeWindow and array.size(sources) > minBars
            array.shift(sources)
            array.shift(times)
    float[] result = sources
sum24hVol(src) =>
    sourceValues = rollOnTimeWhen(src, msIn24h)
    sourceValues.sum()
var cumVol = 0.
cumVol += nz(volume)
expr = syminfo.volumetype == "quote" ? volume : ( syminfo.volumetype == "base" ? close * volume : na )
vol24h = request.security(syminfo.tickerid, sumVolTF, sum24hVol(expr * request.currency_rate(syminfo.currency, currency, ignore_invalid_currency = true)), ignore_invalid_symbol = true)
if barstate.islast
    if syminfo.volumetype == "tick" and syminfo.type == "crypto" or cumVol == 0
        vol24h := na
plot(vol24h, title = "24h_vol", style = plot.style_columns)

// volume in base and quote currencies
volBase = syminfo.volumetype == "base" ? volume : ( syminfo.volumetype == "quote" and close != 0 ? volume / close : na )
volQuote = syminfo.volumetype == "quote" ? volume : ( syminfo.volumetype == "base" ? volume * close : na ) 
plot(volBase, title = "volume_base", style = plot.style_columns)
plot(volQuote, title = "volume_quote", style = plot.style_columns)

// 24h prev value (generic)
prev24hVal(source) =>
	src = source
	max_bars_back(src, maxBufferSize)
	max_bars_back(time, maxBufferSize)
	int BB24h = na
	for i = 0 to countOfFiveMinsInDay
		if (time - time[i]) >= msIn24h
			if (time - time[i]) == msIn24h
				BB24h := i
			break
		BB24h := i
	src[BB24h]

// 24h vol prev value
vol24hPrev = prev24hVal(vol24h)
plot(vol24hPrev, title = "24h_vol_prev", style = plot.style_columns)

// 24h volume change abs
float vol24hChangeAbs = na
if not na(vol24h) and not na(vol24hPrev)
	vol24hChangeAbs := vol24h - vol24hPrev
plot(vol24hChangeAbs, title = "24h_vol_change_abs", style = plot.style_columns)

// 24h volume change
float vol24hChange = na
if not na(vol24hChangeAbs) and vol24hPrev != 0
	vol24hChange := (vol24hChangeAbs / math.abs(vol24hPrev)) * 100
plot(vol24hChange, title = "24h_vol_change", style = plot.style_columns)

// 24h close prev value
close24hPrev = prev24hVal(close)
plot(close24hPrev, title = "24h_close_prev", style = plot.style_columns)

// 24h close change abs
float close24hChangeAbs = na
if not na(close) and not na(close24hPrev)
	close24hChangeAbs := close - close24hPrev
plot(close24hChangeAbs, title = "24h_close_change_abs", style = plot.style_columns)

// 24h close change
float close24hChange = na
if na(close24hChangeAbs) or close24hPrev == 0 or (close24hPrev < 0 and close > 0)
	na
else
	close24hChange := (close24hChangeAbs / math.abs(close24hPrev)) * 100
plot(close24hChange, title = "24h_close_change", style = plot.style_columns)
