import TradingView/RelativeValue/2 as rv

sum(daysBack)=>
	startT = startFrom(daysBack)
	sum = 0.
	for i = 0 to bar_index
		if time[i] < startT
			break
		sum += close[i]
	sum

sumYTD()=>
	var sum = 0.
    if year(time[1], syminfo.timezone) < year(time, syminfo.timezone)
        sum := 0
    sum += close
	sum

fundPerf(daysBack) =>
	startT = startFrom(daysBack)
	if time < startT
		na
	else
		lastI = bar_index
		for i = 0 to bar_index
			if time[i] < startT
				lastI := i - 1
				break

		perf = if (close[lastI] < 0 and close > 0) or close[lastI] == 0
		    na
		else
		    (close - close[lastI]) * 100 / math.abs(close[lastI])
		perf

fundPerfYTD() =>
	max_bars_back(time, 2*years1)
	max_bars_back(close, 2*years1)
    
    lastI = bar_index
    for i = 1 to bar_index
        if year(time[i]) < year
            lastI := i - 1
            break

    perf = if (close[lastI] < 0 and close > 0) or close[lastI] == 0
        na
    else
        (close - close[lastI]) * 100 / math.abs(close[lastI])

    perf

fundFlowsTicker = __financial_tickerid(syminfo.tickerid, "FUND_FLOWS", "D")
[fund_flows1M, fund_flows3M, fund_flows1Y, fund_flows3Y, fund_flows5Y, fund_flowsYTD] = request.security(fundFlowsTicker, fundTF, [sum(month1), sum(month3), sum(years1), sum(years3), sum(years5), sumYTD()], ignore_invalid_symbol=true, gaps=barmerge.gaps_off)

plot(fund_flows1M, title="fund_flows.1M")
plot(fund_flows3M, title="fund_flows.3M")
plot(fund_flows1Y, title="fund_flows.1Y")
plot(fund_flows3Y, title="fund_flows.3Y")
plot(fund_flows5Y, title="fund_flows.5Y")
plot(fund_flowsYTD, title="fund_flows.YTD")

navTicker = __financial_tickerid(syminfo.tickerid, "NAV", "D")
[navPerf1M, navPerf3M, navPerf1Y, navPerf3Y, navPerf5Y, navPerfYTD] = request.security(navTicker, fundTF, [fundPerf(month1), fundPerf(month3), fundPerf(years1), fundPerf(years3), fundPerf(years5), fundPerfYTD()], ignore_invalid_symbol=true, gaps=barmerge.gaps_off)

plot(navPerf1M, title="nav_perf.1M")
plot(navPerf3M, title="nav_perf.3M")
plot(navPerf1Y, title="nav_perf.1Y")
plot(navPerf3Y, title="nav_perf.3Y")
plot(navPerf5Y, title="nav_perf.5Y")
plot(navPerfYTD, title="nav_perf.YTD")

aumTicker = __financial_tickerid(syminfo.tickerid, "AUM", "D")
[aumPerf1M, aumPerf3M, aumPerf1Y, aumPerf3Y, aumPerf5Y, aumPerfYTD] = request.security(aumTicker, fundTF, [fundPerf(month1), fundPerf(month3), fundPerf(years1), fundPerf(years3), fundPerf(years5), fundPerfYTD()], ignore_invalid_symbol=true, gaps=barmerge.gaps_off)

plot(aumPerf1M, title="aum_perf.1M")
plot(aumPerf3M, title="aum_perf.3M")
plot(aumPerf1Y, title="aum_perf.1Y")
plot(aumPerf3Y, title="aum_perf.3Y")
plot(aumPerf5Y, title="aum_perf.5Y")
plot(aumPerfYTD, title="aum_perf.YTD")

// nav_total_return.<1M|3M|6M|YTD|1Y|3Y|5Y>
percent(cur, prev) =>
    (not na(prev) and prev != 0) ? (cur - prev) / prev * 100 : na
changePercentAgo(source,period) =>
    bool anchor = if str.endswith(period, "Y")
        mult = period == "3Y" ? 3 : period == "5Y" ? 5 : 1
        timeframe.change("12M") and year % mult == 0
    else
        timeframe.change(period)
    prev = rv.averageAtTime(source, 1, anchor, false)
    percent(source, prev)
changePercentYTD(source) =>
    var float lastYTD = na
    if year!=year[1]
        lastYTD := source[1]
    percent(source, lastYTD)
changePercent(source,period) =>
    period == "YTD" ? changePercentYTD(source) : changePercentAgo(source,period)

navTotalReturns(finTicker) =>
	[ntr1M, ntr3M, ntr6M, ntr1Y, ntr3Y, ntr5Y, ntrYTD, timeClose, isLast] = request.security(finTicker, fundTF, [changePercent(close, "1M"), changePercent(close, "3M"), changePercent(close, "6M"), changePercent(close, "1Y"), changePercent(close, "3Y"), changePercent(close, "5Y"), changePercent(close, "YTD"), time_close, barstate.islast], lookahead = barmerge.lookahead_on, ignore_invalid_symbol=true)
	if isLast and time >= timeClose
		[na, na, na, na, na, na, na]
	else
		[ntr1M, ntr3M, ntr6M, ntr1Y, ntr3Y, ntr5Y, ntrYTD]

navAllTicker = __financial_tickerid(syminfo.tickerid, "NAV_ALL", "D")
[ntr1M, ntr3M, ntr6M, ntr1Y, ntr3Y, ntr5Y, ntrYTD] = navTotalReturns(navAllTicker)

var float navTotalReturn1M = na
var float navTotalReturn3M = na
var float navTotalReturn6M = na
var float navTotalReturn1Y = na
var float navTotalReturn3Y = na
var float navTotalReturn5Y = na
var float navTotalReturnYTD = na
if not na(ntr1M)
    navTotalReturn1M := ntr1M
    navTotalReturn3M := ntr3M
    navTotalReturn6M := ntr6M
    navTotalReturn1Y := ntr1Y
    navTotalReturn3Y := ntr3Y
    navTotalReturn5Y := ntr5Y
    navTotalReturnYTD := ntrYTD

plot(navTotalReturn1M, title = "nav_total_return.1M")
plot(navTotalReturn3M, title = "nav_total_return.3M")
plot(navTotalReturn6M, title = "nav_total_return.6M")
plot(navTotalReturnYTD, title = "nav_total_return.YTD")
plot(navTotalReturn1Y, title = "nav_total_return.1Y")
plot(navTotalReturn3Y, title = "nav_total_return.3Y")
plot(navTotalReturn5Y, title = "nav_total_return.5Y")