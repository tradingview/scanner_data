// high & low

ath_and_date_and_lowest_after_ath(_x, _xt, _y) =>
	ath = _x
	ath_date = _xt/1000
	low_after_ath = _y
	if nz(ath[1], ath) > ath
		ath := nz(ath[1], ath)
		ath_date := ath_date[1]
		if low_after_ath[1] < low_after_ath
			low_after_ath := low_after_ath[1]
	[ath, ath_date, low_after_ath]
[allTimeHigh, allTimeHighDate, lowAfterAllTimeHigh] = ath_and_date_and_lowest_after_ath(high, time, low)
plot(allTimeHigh, title='High.All')
plot(allTimeHighDate, title='High.All.Date')
plot(allTimeHigh, title='High.All.Calc')
plot(allTimeHighDate, title='High.All.Calc.Date')
plot(lowAfterAllTimeHigh, title='Low.After.High.All')
atl_and_date(_x, _xt) =>
	atl = _x
	atl_date = _xt/1000
	if nz(atl[1], atl) < atl
		atl := nz(atl[1], atl)
		atl_date := atl_date[1]
	[atl, atl_date]
[allTimeLow, allTimeLowDate] = atl_and_date(low, time)
plot(allTimeLow, title='Low.All')
plot(allTimeLowDate, title='Low.All.Date')
plot(allTimeLow, title='Low.All.Calc')
plot(allTimeLowDate, title='Low.All.Calc.Date')
var firstOpen = open
plot(firstOpen, title='Open.All.Calc')
custom_lowest_and_date(_x, _xt, len, maxbarsback) =>
	x = _x
	xt = _xt/1000
	if bar_index == 0
		x += x[maxbarsback] * 0  // max_bars_back
		xt += xt[maxbarsback] * 0  // max_bars_back
	if len == 0
		[na, na]
	else if len == 1
		[x, xt]
	else
		_len = len
		if na(x[len + 1]) != true
			_len -= 1
			_len
		res = x
		res := x
		date = xt
		for i = 0 to _len by 1
			if x[i] < res
				res := x[i]
				date := xt[i]
		[res, date]
custom_highest_and_date(_x, _xt, len, maxbarsback) =>
	x = _x
	xt = _xt/1000
	if bar_index == 0
		x += x[maxbarsback] * 0  // max_bars_back
		xt += xt[maxbarsback] * 0  // max_bars_back
	if len == 0
		[na, na]
	else if len == 1
		[x, xt]
	else
		_len = len
		if na(x[len + 1]) != true
			_len -= 1
		res = x
		date = xt
		for i = 0 to _len by 1
			if x[i] > res
				res := x[i]
				date := xt[i]
		[res, date]
fastSearchN(_xs, x, maxbarsback) =>  // xs - sorted, ascending
	xs = _xs
	if bar_index == 0
		xs += xs[maxbarsback] * 0  // max_bars_back
	left = 0
	right = math.min(bar_index, maxbarsback)
	mid = 0
	if xs < x
		0
	else
		for i = 0 to 9 by 1
			mid := math.ceil((left + right) / 2)
			if left == right
				break
			else if xs[mid] < x
				right := mid
				continue
			else if xs[mid] > x
				left := mid
				continue
			else
				break
		mid
years5 = 365 * 4 + 366
years5_ago = timenow - 1000 * 60 * 60 * 24 * years5
countOfBars5YearAgo = fastSearchN(time, years5_ago, years5)
years3 = 365 * 3
years3_ago = timenow - 1000 * 60 * 60 * 24 * years3
countOfBars3YearAgo = fastSearchN(time, years3_ago, years3)
weeks52 = 7 * 52
weeks52_ago = timenow - 1000 * 60 * 60 * 24 * weeks52
countOfBars52WeekAgo = fastSearchN(time, weeks52_ago, weeks52)
[weeks52_low, weeks52_low_date] = custom_lowest_and_date(low, time, countOfBars52WeekAgo, weeks52)
plot(weeks52_low, title='price_52_week_low')
plot(weeks52_low_date, title='price_52_week_low_date')
[weeks52_high, weeks52_high_date] = custom_highest_and_date(high, time, countOfBars52WeekAgo, weeks52)
plot(weeks52_high, title='price_52_week_high')
plot(weeks52_high_date, title='price_52_week_high_date')
month6 = 180
months6_ago = timenow - 1000 * 60 * 60 * 24 * month6
countOfBars6MonthAgo = fastSearchN(time, months6_ago, month6)
[months6_low, months6_low_date] = custom_lowest_and_date(low, time, countOfBars6MonthAgo, month6)
plot(months6_low, title='Low.6M')
plot(months6_low_date, title='Low.6M.Date')
[months6_high, months6_high_date] = custom_highest_and_date(high, time, countOfBars6MonthAgo, month6)
plot(months6_high, title='High.6M')
plot(months6_high_date, title='High.6M.Date')
month3 = 90
months3_ago = timenow - 1000 * 60 * 60 * 24 * month3
countOfBars3MonthAgo = fastSearchN(time, months3_ago, month3)
[months3_low, months3_low_date] = custom_lowest_and_date(low, time, countOfBars3MonthAgo, month3)
plot(months3_low, title='Low.3M')
plot(months3_low_date, title='Low.3M.Date')
[months3_high, months3_high_date] = custom_highest_and_date(high, time, countOfBars3MonthAgo, month3)
plot(months3_high, title='High.3M')
plot(months3_high_date, title='High.3M.Date')
month1 = 30
month_ago_this_bar = time - 1000 * 60 * 60 * 24 * month1
month_ago = timenow - 1000 * 60 * 60 * 24 * month1
countOfBars1MonthAgo = fastSearchN(time, month_ago, month1)
countOfBars1MonthAgoThisBar = fastSearchN(time, month_ago_this_bar, month1)
[month1_low, month1_low_date] = custom_lowest_and_date(low, time, countOfBars1MonthAgo, month1)
plot(month1_low, title='Low.1M')
plot(month1_low_date, title='Low.1M.Date')
[month1_high, month1_high_date] = custom_highest_and_date(high, time, countOfBars1MonthAgo, month1)
plot(month1_high, title='High.1M')
plot(month1_high_date, title='High.1M.Date')
week1 = 7
week_ago = timenow - 1000 * 60 * 60 * 24 * week1
week_ago_this_bar = time - 1000 * 60 * 60 * 24 * week1
countOfBarsWeekAgo = fastSearchN(time, week_ago, week1)
countOfBarsWeekAgoThisBar = fastSearchN(time, week_ago_this_bar, week1)
[week1_low] = custom_lowest_and_date(low, time, countOfBarsWeekAgo, week1)
plot(week1_low, title='Low.5D')
[week1_high] = custom_highest_and_date(high, time, countOfBarsWeekAgo, week1)
plot(week1_high, title='High.5D')
// volatility
volatility(bb) =>
	bb2 = bb
	if bar_index == 0
		bb2 := 365
	if bb2 == 0
		na
	else
		s = math.sum((high - low) / math.abs(low) * 100 / bb2, bb2)
		if bb == 0
			na
		else
			s
plot(volatility(countOfBarsWeekAgoThisBar), title='Volatility.W')
plot(volatility(countOfBars1MonthAgoThisBar), title='Volatility.M')
plot(ta.tr(true) * 100 / math.abs(low), title='Volatility.D')

// first bar's timestamp in pine history
first_bar_time(_t) => 
	var float fb = na
	if na(fb)
		fb := _t/1000
	fb
plot(first_bar_time(time), title='first_bar_time')