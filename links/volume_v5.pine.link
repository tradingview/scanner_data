//////////////////////////////////// study("relative volume v5") ///////////////////////////////////////////////////////
rVolAvgDays = 10
rVolBarDurationMS() =>
	timeframe.multiplier * 60 * 1000
rVolDayInBars() =>
	24 * 60 / timeframe.multiplier
rVolCalcSumVol(offset, daysBack, time1d) =>
	vol = volume
	tm = time
	result = 0.
	// expected intraday only!
	maxDetailedBars = (rVolAvgDays + 1) * rVolDayInBars()
	maxDetailedUnixTime = maxDetailedBars * rVolBarDurationMS()
	if bar_index == 0  // force bars back detector for needed depth
		result := tm[maxDetailedBars] - time1d[maxDetailedBars] > vol[maxDetailedBars] ? 0 : 0
	startCalcBound = timenow - maxDetailedUnixTime
	if time >= startCalcBound  // skip unnecessary calculations in deep history
		cur1DTime = time1d[0]
		cur1DTimeChanged = 0
		curTimeOffset = -1
		cumVolume = 0.
		startDayTime = 0
		prevStartDayTime = 0
		for i = 1 to maxDetailedBars by 1
			accumVolume = false
			if time1d[i] != cur1DTime
				cur1DTimeChanged += 1
				cur1DTime := time1d[i]
				accumVolume := cur1DTimeChanged > offset
				prevStartDayTime := startDayTime
				startDayTime := i - 1
			if 1 == cur1DTimeChanged and curTimeOffset < 0
				curTimeOffset := i - 1
			if accumVolume
				for j = math.max(prevStartDayTime, startDayTime - curTimeOffset) to startDayTime by 1
					cumVolume += vol[j]
			if daysBack == cur1DTimeChanged
				break
		result := cumVolume
	result
calcHolesPerDayPercent(minBarsPerSession) =>
	holes = 0
	days = 0
	bars = 0
	for i = 0 to 5 * rVolDayInBars() by 1  // try to move back for 5 days
		// skip current day, analyse previous days only
		if dayofmonth[i] != dayofmonth[i + 1]
			if bars < minBarsPerSession and days > 0
				holes += minBarsPerSession - bars
			bars := 0
			days += 1
		else
			if days > 0
				bars += 1
		if days == 5
			break
	holes > 0 ? holes / days / minBarsPerSession * 100 : 0
calcMaxHolesPerDayPercent() =>
	var maxHolesPerDayPercent = 0
	var resetStatDays = 0
	if dayofmonth != dayofmonth[1]
		resetStatDays += 1
	if resetStatDays > rVolAvgDays
		resetStatDays := 0
		maxHolesPerDayPercent := 0
	maxHolesPerDayPercent := math.max(calcHolesPerDayPercent(5 * 60 / timeframe.multiplier), maxHolesPerDayPercent)
	maxHolesPerDayPercent
calcRVolume() =>
	time1d = request.security(syminfo.tickerid, '1D', time, lookahead=barmerge.lookahead_on)
	volNow = rVolCalcSumVol(0, 1, time1d)
	if barstate.isrealtime and timenow - time1d < 24 * 60 * 60 * 1000
		// adjustment for RT bar
		x_y = (timenow - time1d) / rVolBarDurationMS()
		z = 1 - (timenow - time) / rVolBarDurationMS()
		koeff = (x_y + z) / x_y
		volNow *= koeff
	volNow / (rVolCalcSumVol(1, rVolAvgDays + 1, time1d) / rVolAvgDays)
realtiveVolume10d = calcRVolume()
if calcMaxHolesPerDayPercent() > 35
	realtiveVolume10d := na
plot(realtiveVolume10d, title='relative_volume_intraday', linewidth=2)